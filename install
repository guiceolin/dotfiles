#! /usr/local/bin/python
#! /usr/bin/env python
import argparse
import os
import mmap
import imp

current_dir = os.path.dirname(os.path.realpath(__file__))

parser = argparse.ArgumentParser(description='Install DotFiles')
#parser.add_argument('--skip-git',  action='store_true', help='Skip dotfiles for git.')
#parser.add_argument('--skip-ruby', action='store_true', help='Skip dotfiles for ruby.')
#parser.add_argument('--skip-vim',  action='store_true', help='Skip dotfiles for vim.')
parser.add_argument('--macosx',    action='store_true', help='MacOSX version.')
parser.add_argument('-v','--verbose', dest='verbose', action='store_true', help='Verbose mode.')

subparsers = parser.add_subparsers(help='sub-command help')

parser_module = subparsers.add_parser('module', help='a help')
parser_module.add_argument('name', help='Name of module to install')

args = parser.parse_args()

class Logger:
  verbose = False
  def __init__(self, verbose=False):
    self.verbose = verbose

  def log(self, msg):
    if self.verbose:
      print(msg),

logger = Logger(verbose=args.verbose)

class ModuleInstaller:
  @staticmethod
  def install(name):
    enabled_path = current_dir + '/modules_enabled/' + name

    if not os.path.exists(enabled_path):
      try:
        logger.log("Installing '" + name + "' module...")
        os.symlink(current_dir + '/modules_available/' + name, enabled_path )
        plugin_install = imp.load_source('install', enabled_path + '/install.py')
        plugin_install.install(enabled_path,logger)
        logger.log(' done!\n')
      except IOError:
        logger.log("\nInstall.py not found on " + name + " module, skipping... Done!")
      except AttributeError:
        logger.log("\nERROR: Install method not found in '" + name + "' module installation script!")
        logger.log("\nERROR: '" + name + "' module may not work properly.")

    else:
      logger.log("'" + name +"' module already installed, skipping...\n")

class CoreInstaller:
  @staticmethod
  def install(macosx=False):
    home = os.getenv("HOME")
    if macosx:
      bashrc_path = home + '/.bash_profile'
    else:
      bashrc_path = home + '/.bashrc'

    bashrc_file = open(bashrc_path, 'r')
    bashrc = bashrc_file.readlines()
    bashrc_file.close()
    found = False
    for line in bashrc:
      if str('# DOTFILES SOURCE #\n') in line:
        found = True

    if not found:
      with open(bashrc_path, 'a') as f:
        logger.log("Installing CORE...")
        f.write('\n# DOTFILES SOURCE #\n')
        f.write('source ' + current_dir + '/core/lib.bash\n')
        f.write('source ' + current_dir + '/core/bash_profile\n')
        logger.log(" Done!\n")
    else:
      logger.log("CORE already installed, skipping...\n")


print args
CoreInstaller.install(args.macosx)
if args.name:
  ModuleInstaller.install(args.name)

#def create_vim_links():

#if not args.skip_git:
#  create_git_links()
#if not args.skip_ruby:
#  create_ruby_links()
#if not args.skip_ruby:
#  create_vim_links()

#if args.macosx:
#  bashrc = home + '/.bash_profile'
#else:
#  bashrc = home + '/.bashrc'

#with open(bashrc, 'a') as myfile:
#  myfile.write('\n# DOTFILES SOURCE #\n')
#  myfile.write('source ' + current_dir + '/core/lib.bash\n')
#  myfile.write('source ' + current_dir + '/core/bash_profile\n')
