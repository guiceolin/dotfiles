#! /usr/local/bin/python
#! /usr/bin/env python
import argparse
import os

current_dir = os.path.dirname(os.path.realpath(__file__))

parser = argparse.ArgumentParser(description='Install DotFiles')
parser.add_argument('--skip-git',  action='store_true', help='Skip dotfiles for git.')
parser.add_argument('--skip-ruby', action='store_true', help='Skip dotfiles for ruby.')
parser.add_argument('--skip-vim',  action='store_true', help='Skip dotfiles for vim.')
parser.add_argument('--macosx',    action='store_true', help='MacOSX version.')
parser.add_argument('-v','--verbose', dest='verbose', action='store_true', help='Verbose mode.')
args = parser.parse_args()

home = os.getenv("HOME")
def log(msg):
  if args.verbose:
    print msg

def create_git_links():
  if not os.path.exists(home +'/.gitconfig'):
    os.symlink(current_dir + '/GIT/gitconfig', home + '/.gitconfig')
  else:
    log("gitconfig already exists, skipping...")
  if not os.path.exists(home+'/.gitignore'):
    os.symlink(current_dir + '/GIT/gitignore',home + '/.gitignore')
  else:
    log("gitignore already exists, skipping...")

def create_ruby_links():
  if not os.path.exists(home+'/.gemrc'):
    os.symlink(current_dir + '/RUBY/gemrc', home + '/.gemrc')
  else:
      log('gemrc already exists, skipping...')
  if not os.path.exists(home + '/.irbrc'):
    os.symlink(current_dir + '/RUBY/irbrc', home + '/.irbrc')
  else:
    log('irbrc already exists, skipping...')

def create_vim_links():
  if not os.path.exists(home + '/.vim'):
    os.symlink(current_dir + '/dotvim/', home + '/vim')
  else:
    log('vim directory alread exists, skipping...')
  if not os.path.exists(home + '/.vimrc'):
    os.symlink(current_dir + "dotvim/vimrc", home + '/.vimrc')
  else:
    log('vimrc already exists, skipping...')

if not args.skip_git:
  create_git_links()
if not args.skip_ruby:
  create_ruby_links()
if not args.skip_ruby:
  create_vim_links()

if args.macosx:
  bashrc = home + '/.bash_profile'
else:
  bashrc = home + '/.bashrc'

with open(bashrc, 'a') as myfile:
  myfile.write('\n# DOTFILES SOURCE #\n')
  myfile.write('source ' + current_dir + '/core/lib.bash\n')
  myfile.write('source ' + current_dir + '/core/bash_profile\n')
