#! /usr/local/bin/python
#! /usr/bin/env python
import argparse
import os
import mmap
import imp
from lib.module_installer import ModuleInstaller
from lib.logger import Logger

current_dir = os.path.dirname(os.path.realpath(__file__))

parser = argparse.ArgumentParser(description='Install DotFiles')
#parser.add_argument('--skip-git',  action='store_true', help='Skip dotfiles for git.')
#parser.add_argument('--skip-ruby', action='store_true', help='Skip dotfiles for ruby.')
#parser.add_argument('--skip-vim',  action='store_true', help='Skip dotfiles for vim.')
parser.add_argument('--macosx',    action='store_true', help='MacOSX version.')
parser.add_argument('-v','--verbose', dest='verbose', action='store_true', help='Verbose mode.')

subparsers = parser.add_subparsers(help='sub-command help')

parser_module = subparsers.add_parser('module', help='a help')
parser_module.add_argument('name', help='Name of module to install')

args = parser.parse_args()



logger = Logger(verbose=args.verbose)

class CoreInstaller:
  @staticmethod
  def install(macosx=False):
    home = os.getenv("HOME")
    if macosx:
      bashrc_path = home + '/.bash_profile'
    else:
      bashrc_path = home + '/.bashrc'

    bashrc_file = open(bashrc_path, 'r')
    bashrc = bashrc_file.readlines()
    bashrc_file.close()
    found = False
    for line in bashrc:
      if str('# DOTFILES SOURCE #\n') in line:
        found = True

    if not found:
      with open(bashrc_path, 'a') as f:
        logger.log("Installing CORE...")
        f.write('\n# DOTFILES SOURCE #\n')
        f.write('source ' + current_dir + '/core/lib.bash\n')
        f.write('source ' + current_dir + '/core/bash_profile\n')
        logger.log(" Done!\n")
    else:
      logger.log("CORE already installed, skipping...\n")


CoreInstaller.install(args.macosx)
module_installer = ModuleInstaller(args.name, current_dir, logger)
module_installer.install()
